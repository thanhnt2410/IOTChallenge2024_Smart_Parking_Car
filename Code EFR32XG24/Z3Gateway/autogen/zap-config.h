// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

// The following is brought in by the endianness component, which all
// applications must include
#include "sl_endianness.h"

#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG 1

// Default values for the attributes longer than a pointer, in a form of a
// binary blob. All attribute values with size greater than 2 bytes. Excluding 0
// values and externally saved values. Separate block is generated for
// big-endian and little-endian cases.

#define GENERATED_DEFAULTS_COUNT (3)

#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
   0x09, 0xAC, 0x2F, /* 0,DEFAULT value for cluster: Green Power, attribute: gpp functionality, side: client */ \
   0xFF, 0xFF, 0xFF, /* 3,DEFAULT value for cluster: Green Power, attribute: gpp active functionality, side: client */ \
   0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 6,DEFAULT value for cluster: Green Power, attribute: gp link key, side: client */ \
}
#else //!BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
  0x2F, 0xAC, 0x09,  /* 0,DEFAULT value for cluster: Green Power, attribute: gpp functionality, side: client */ \
  0xFF, 0xFF, 0xFF,  /* 3,DEFAULT value for cluster: Green Power, attribute: gpp active functionality, side: client */ \
   0x5A, 0x69, 0x67, 0x42, 0x65, 0x65, 0x41, 0x6C, 0x6C, 0x69, 0x61, 0x6E, 0x63, 0x65, 0x30, 0x39, /* 6,DEFAULT value for cluster: Green Power, attribute: gp link key, side: client */ \
}
#endif


// This is an array of EmberAfAttributeMinMaxValue structures.

#define GENERATED_MIN_MAX_DEFAULT_COUNT (0)
	#define GENERATED_MIN_MAX_DEFAULTS { }


#define GENERATED_ATTRIBUTE_COUNT (57)

// This is an array of EmberAfAttributeMetadata structures.
#define GENERATED_ATTRIBUTES { \
  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT| ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)3  } }, /* 0 Cluster: Basic, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x08  } }, /* 1 Cluster: Basic, Attribute: ZCL version, Side: server*/ \
		  { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 2 Cluster: Basic, Attribute: power source, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)3  } }, /* 3 Cluster: Basic, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 4 Cluster: Identify, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000  } }, /* 5 Cluster: Identify, Attribute: identify time, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)2  } }, /* 6 Cluster: Identify, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 7 Cluster: Groups, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 8 Cluster: Scenes, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 9 Cluster: On/off, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 10 Cluster: On/off, Attribute: on/off, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)2  } }, /* 11 Cluster: On/off, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 12 Cluster: Level Control, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 13 Cluster: Level Control, Attribute: current level, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)3  } }, /* 14 Cluster: Level Control, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_UTC_TIME_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 15 Cluster: Time, Attribute: time, Side: server*/ \
	  { 0x0001, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 16 Cluster: Time, Attribute: time status, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)2  } }, /* 17 Cluster: Time, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)4  } }, /* 18 Cluster: Over the Air Bootloading, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 19 Cluster: Power Profile, Attribute: total profile num, Side: server*/ \
		  { 0x0001, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 20 Cluster: Power Profile, Attribute: multiple scheduling, Side: server*/ \
		  { 0x0002, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x01  } }, /* 21 Cluster: Power Profile, Attribute: energy formatting, Side: server*/ \
		  { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 22 Cluster: Power Profile, Attribute: energy remote, Side: server*/ \
		  { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00  } }, /* 23 Cluster: Power Profile, Attribute: schedule mode, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 24 Cluster: Power Profile, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 25 Cluster: Poll Control, Attribute: cluster revision, Side: client*/ \
		  { 0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x14  } }, /* 26 Cluster: Green Power, Attribute: gpp max proxy table entries, Side: client*/ \
		  { 0x0011, ZCL_LONG_OCTET_STRING_ATTRIBUTE_TYPE, 255, (ATTRIBUTE_MASK_CLIENT), { NULL } }, /* 27 Cluster: Green Power, Attribute: proxy table, Side: client*/ \
	  { 0x0016, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[0]) } }, /* 28 Cluster: Green Power, Attribute: gpp functionality, Side: client*/ \
	  { 0x0017, ZCL_BITMAP24_ATTRIBUTE_TYPE, 3, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[3]) } }, /* 29 Cluster: Green Power, Attribute: gpp active functionality, Side: client*/ \
	  { 0x0020, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00  } }, /* 30 Cluster: Green Power, Attribute: gp shared security key type, Side: client*/ \
		  { 0x0021, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00000000000000000000000000000000 } }, /* 31 Cluster: Green Power, Attribute: gp shared security key, Side: client*/ \
	  { 0x0022, ZCL_SECURITY_KEY_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_WRITABLE| ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[6]) } }, /* 32 Cluster: Green Power, Attribute: gp link key, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 33 Cluster: Green Power, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 34 Cluster: Color Control, Attribute: cluster revision, Side: client*/ \
		  { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 35 Cluster: Color Control, Attribute: remaining time, Side: server*/ \
		  { 0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x616B  } }, /* 36 Cluster: Color Control, Attribute: current x, Side: server*/ \
		  { 0x0004, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x607D  } }, /* 37 Cluster: Color Control, Attribute: current y, Side: server*/ \
		  { 0x0008, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x01  } }, /* 38 Cluster: Color Control, Attribute: color mode, Side: server*/ \
		  { 0x000F, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00  } }, /* 39 Cluster: Color Control, Attribute: color control options, Side: server*/ \
		  { 0x0010, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 40 Cluster: Color Control, Attribute: number of primaries, Side: server*/ \
		  { 0x4001, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x01  } }, /* 41 Cluster: Color Control, Attribute: enhanced color mode, Side: server*/ \
		  { 0x400A, ZCL_BITMAP16_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 42 Cluster: Color Control, Attribute: color capabilities, Side: server*/ \
		  { 0x400B, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 43 Cluster: Color Control, Attribute: color temp physical min, Side: server*/ \
		  { 0x400C, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0xFEFF  } }, /* 44 Cluster: Color Control, Attribute: color temp physical max, Side: server*/ \
		  { 0x400D, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x00  } }, /* 45 Cluster: Color Control, Attribute: couple color temp to level min-mireds, Side: server*/ \
		  { 0x4010, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00  } }, /* 46 Cluster: Color Control, Attribute: start up color temperature mireds, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)3  } }, /* 47 Cluster: Color Control, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 48 Cluster: Illuminance Measurement, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 49 Cluster: Temperature Measurement, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 50 Cluster: Relative Humidity Measurement, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 51 Cluster: Occupancy Sensing, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 52 Cluster: IAS Zone, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 53 Cluster: Simple Metering, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 54 Cluster: Meter Identification, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 55 Cluster: Appliance Statistics, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } } /* 56 Cluster: Electrical Measurement, Attribute: cluster revision, Side: client*/ \
		 }

 

#define GENERATED_CLUSTER_COUNT (26)
	
// This is an array of EmberAfCluster structures.
#define GENERATED_CLUSTERS { \
  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 1, 0, CLUSTER_MASK_CLIENT, NULL }, /* 0, Endpoint Id: 1, Cluster: Basic, Side: client*/ \
	  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[1]), 3, 0, CLUSTER_MASK_SERVER, NULL }, /* 1, Endpoint Id: 1, Cluster: Basic, Side: server*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[4]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 2, Endpoint Id: 1, Cluster: Identify, Side: client*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 2, 4, CLUSTER_MASK_SERVER, NULL }, /* 3, Endpoint Id: 1, Cluster: Identify, Side: server*/ \
	  { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[7]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 4, Endpoint Id: 1, Cluster: Groups, Side: client*/ \
	  { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 5, Endpoint Id: 1, Cluster: Scenes, Side: client*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[9]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 6, Endpoint Id: 1, Cluster: On/off, Side: client*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[10]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 7, Endpoint Id: 1, Cluster: On/off, Side: server*/ \
	  { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[12]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 8, Endpoint Id: 1, Cluster: Level Control, Side: client*/ \
	  { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[13]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 9, Endpoint Id: 1, Cluster: Level Control, Side: server*/ \
	  { 0x000A, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 3, 0, CLUSTER_MASK_SERVER, NULL }, /* 10, Endpoint Id: 1, Cluster: Time, Side: server*/ \
	  { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[18]), 1, 2, CLUSTER_MASK_SERVER, NULL }, /* 11, Endpoint Id: 1, Cluster: Over the Air Bootloading, Side: server*/ \
	  { 0x001A, (EmberAfAttributeMetadata*)&(generatedAttributes[19]), 6, 7, CLUSTER_MASK_SERVER, NULL }, /* 12, Endpoint Id: 1, Cluster: Power Profile, Side: server*/ \
	  { 0x0020, (EmberAfAttributeMetadata*)&(generatedAttributes[25]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 13, Endpoint Id: 1, Cluster: Poll Control, Side: client*/ \
	  { 0x0300, (EmberAfAttributeMetadata*)&(generatedAttributes[34]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 14, Endpoint Id: 1, Cluster: Color Control, Side: client*/ \
	  { 0x0300, (EmberAfAttributeMetadata*)&(generatedAttributes[35]), 13, 22, CLUSTER_MASK_SERVER, NULL }, /* 15, Endpoint Id: 1, Cluster: Color Control, Side: server*/ \
	  { 0x0400, (EmberAfAttributeMetadata*)&(generatedAttributes[48]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 16, Endpoint Id: 1, Cluster: Illuminance Measurement, Side: client*/ \
	  { 0x0402, (EmberAfAttributeMetadata*)&(generatedAttributes[49]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 17, Endpoint Id: 1, Cluster: Temperature Measurement, Side: client*/ \
	  { 0x0405, (EmberAfAttributeMetadata*)&(generatedAttributes[50]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 18, Endpoint Id: 1, Cluster: Relative Humidity Measurement, Side: client*/ \
	  { 0x0406, (EmberAfAttributeMetadata*)&(generatedAttributes[51]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 19, Endpoint Id: 1, Cluster: Occupancy Sensing, Side: client*/ \
	  { 0x0500, (EmberAfAttributeMetadata*)&(generatedAttributes[52]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 20, Endpoint Id: 1, Cluster: IAS Zone, Side: client*/ \
	  { 0x0702, (EmberAfAttributeMetadata*)&(generatedAttributes[53]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 21, Endpoint Id: 1, Cluster: Simple Metering, Side: client*/ \
	  { 0x0B01, (EmberAfAttributeMetadata*)&(generatedAttributes[54]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 22, Endpoint Id: 1, Cluster: Meter Identification, Side: client*/ \
	  { 0x0B03, (EmberAfAttributeMetadata*)&(generatedAttributes[55]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 23, Endpoint Id: 1, Cluster: Appliance Statistics, Side: client*/ \
	  { 0x0B04, (EmberAfAttributeMetadata*)&(generatedAttributes[56]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 24, Endpoint Id: 1, Cluster: Electrical Measurement, Side: client*/ \
	  { 0x0021, (EmberAfAttributeMetadata*)&(generatedAttributes[26]), 8, 297, CLUSTER_MASK_CLIENT, NULL } /* 25, Endpoint Id: 242, Cluster: Green Power, Side: client*/ \
	 }

 
#define GENERATED_ENDPOINT_TYPE_COUNT (2)

// This is an array of EmberAfEndpointType structures.
#define GENERATED_ENDPOINT_TYPES { \
  { ((EmberAfCluster*)&(generatedClusters[0])), 25, 73 }, \
	  { ((EmberAfCluster*)&(generatedClusters[25])), 1, 297 }, \
	 } 
// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (255)

// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (13)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE (370)

// Number of fixed endpoints	
#define FIXED_ENDPOINT_COUNT (2)

// Array of endpoints that are supported, the data inside the array is the
// endpoint number.
#define FIXED_ENDPOINT_ARRAY { \
  1, \
  242 \
}

// Array of profile ids
#define FIXED_PROFILE_IDS { \
  260, \
  41440 \
}

// Array of device ids
#define FIXED_DEVICE_IDS { \
  65535, \
  97 \
}

// Array of device versions
#define FIXED_DEVICE_VERSIONS { \
  1, \
  0 \
}

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { \
  0, \
  1 \
}

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { \
  0, \
  0 \
}

// Array of EmberAfCommandMetadata structs.
#define ZAP_COMMAND_MASK(mask) COMMAND_MASK_ ## mask
#define EMBER_AF_GENERATED_COMMAND_COUNT  (98)
#define GENERATED_COMMANDS { \
  { 0x0000, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 0, Cluster: Basic, Command: ResetToFactoryDefaults*/ \
	  { 0x0003, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 1, Cluster: Identify, Command: Identify*/ \
	  { 0x0003, 0x00, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 2, Cluster: Identify, Command: IdentifyQueryResponse*/ \
	  { 0x0003, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 3, Cluster: Identify, Command: IdentifyQuery*/ \
	  { 0x0004, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 4, Cluster: Groups, Command: AddGroup*/ \
	  { 0x0004, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 5, Cluster: Groups, Command: AddGroupResponse*/ \
	  { 0x0004, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 6, Cluster: Groups, Command: ViewGroup*/ \
	  { 0x0004, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 7, Cluster: Groups, Command: ViewGroupResponse*/ \
	  { 0x0004, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* 8, Cluster: Groups, Command: GetGroupMembership*/ \
	  { 0x0004, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 9, Cluster: Groups, Command: GetGroupMembershipResponse*/ \
	  { 0x0004, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* 10, Cluster: Groups, Command: RemoveGroup*/ \
	  { 0x0004, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* 11, Cluster: Groups, Command: RemoveGroupResponse*/ \
	  { 0x0004, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* 12, Cluster: Groups, Command: RemoveAllGroups*/ \
	  { 0x0004, 0x05, COMMAND_MASK_OUTGOING_CLIENT }, /* 13, Cluster: Groups, Command: AddGroupIfIdentifying*/ \
	  { 0x0005, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 14, Cluster: Scenes, Command: AddScene*/ \
	  { 0x0005, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 15, Cluster: Scenes, Command: AddSceneResponse*/ \
	  { 0x0005, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 16, Cluster: Scenes, Command: ViewScene*/ \
	  { 0x0005, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 17, Cluster: Scenes, Command: ViewSceneResponse*/ \
	  { 0x0005, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* 18, Cluster: Scenes, Command: RemoveScene*/ \
	  { 0x0005, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 19, Cluster: Scenes, Command: RemoveSceneResponse*/ \
	  { 0x0005, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* 20, Cluster: Scenes, Command: RemoveAllScenes*/ \
	  { 0x0005, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* 21, Cluster: Scenes, Command: RemoveAllScenesResponse*/ \
	  { 0x0005, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* 22, Cluster: Scenes, Command: StoreScene*/ \
	  { 0x0005, 0x04, COMMAND_MASK_INCOMING_CLIENT }, /* 23, Cluster: Scenes, Command: StoreSceneResponse*/ \
	  { 0x0005, 0x05, COMMAND_MASK_OUTGOING_CLIENT }, /* 24, Cluster: Scenes, Command: RecallScene*/ \
	  { 0x0005, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* 25, Cluster: Scenes, Command: GetSceneMembership*/ \
	  { 0x0005, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* 26, Cluster: Scenes, Command: GetSceneMembershipResponse*/ \
	  { 0x0005, 0x42, COMMAND_MASK_INCOMING_CLIENT }, /* 27, Cluster: Scenes, Command: CopySceneResponse*/ \
	  { 0x0006, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 28, Cluster: On/off, Command: Off*/ \
	  { 0x0006, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 29, Cluster: On/off, Command: On*/ \
	  { 0x0006, 0x02, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 30, Cluster: On/off, Command: Toggle*/ \
	  { 0x0008, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 31, Cluster: Level Control, Command: MoveToLevel*/ \
	  { 0x0008, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 32, Cluster: Level Control, Command: Move*/ \
	  { 0x0008, 0x02, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 33, Cluster: Level Control, Command: Step*/ \
	  { 0x0008, 0x03, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 34, Cluster: Level Control, Command: Stop*/ \
	  { 0x0008, 0x04, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 35, Cluster: Level Control, Command: MoveToLevelWithOnOff*/ \
	  { 0x0008, 0x05, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 36, Cluster: Level Control, Command: MoveWithOnOff*/ \
	  { 0x0008, 0x06, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 37, Cluster: Level Control, Command: StepWithOnOff*/ \
	  { 0x0008, 0x07, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 38, Cluster: Level Control, Command: StopWithOnOff*/ \
	  { 0x0019, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* 39, Cluster: Over the Air Bootloading, Command: ImageNotify*/ \
	  { 0x0019, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 40, Cluster: Over the Air Bootloading, Command: QueryNextImageRequest*/ \
	  { 0x0019, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* 41, Cluster: Over the Air Bootloading, Command: QueryNextImageResponse*/ \
	  { 0x0019, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* 42, Cluster: Over the Air Bootloading, Command: ImageBlockRequest*/ \
	  { 0x0019, 0x05, COMMAND_MASK_OUTGOING_SERVER }, /* 43, Cluster: Over the Air Bootloading, Command: ImageBlockResponse*/ \
	  { 0x0019, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* 44, Cluster: Over the Air Bootloading, Command: UpgradeEndRequest*/ \
	  { 0x0019, 0x07, COMMAND_MASK_OUTGOING_SERVER }, /* 45, Cluster: Over the Air Bootloading, Command: UpgradeEndResponse*/ \
	  { 0x001A, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* 46, Cluster: Power Profile, Command: PowerProfileNotification*/ \
	  { 0x001A, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 47, Cluster: Power Profile, Command: PowerProfileRequest*/ \
	  { 0x001A, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* 48, Cluster: Power Profile, Command: PowerProfileResponse*/ \
	  { 0x001A, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 49, Cluster: Power Profile, Command: PowerProfileStateRequest*/ \
	  { 0x001A, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 50, Cluster: Power Profile, Command: GetPowerProfilePriceResponse*/ \
	  { 0x001A, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* 51, Cluster: Power Profile, Command: PowerProfileStateResponse*/ \
	  { 0x001A, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* 52, Cluster: Power Profile, Command: GetOverallSchedulePriceResponse*/ \
	  { 0x001A, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* 53, Cluster: Power Profile, Command: EnergyPhasesScheduleNotification*/ \
	  { 0x001A, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* 54, Cluster: Power Profile, Command: PowerProfilesStateNotification*/ \
	  { 0x001A, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* 55, Cluster: Power Profile, Command: EnergyPhasesScheduleResponse*/ \
	  { 0x001A, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* 56, Cluster: Power Profile, Command: EnergyPhasesScheduleRequest*/ \
	  { 0x001A, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* 57, Cluster: Power Profile, Command: PowerProfileScheduleConstraintsRequest*/ \
	  { 0x001A, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* 58, Cluster: Power Profile, Command: EnergyPhasesScheduleStateRequest*/ \
	  { 0x001A, 0x07, COMMAND_MASK_OUTGOING_SERVER }, /* 59, Cluster: Power Profile, Command: EnergyPhasesScheduleStateResponse*/ \
	  { 0x001A, 0x08, COMMAND_MASK_OUTGOING_SERVER }, /* 60, Cluster: Power Profile, Command: EnergyPhasesScheduleStateNotification*/ \
	  { 0x001A, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* 61, Cluster: Power Profile, Command: GetPowerProfilePriceExtendedResponse*/ \
	  { 0x001A, 0x09, COMMAND_MASK_OUTGOING_SERVER }, /* 62, Cluster: Power Profile, Command: PowerProfileScheduleConstraintsNotification*/ \
	  { 0x001A, 0x0A, COMMAND_MASK_OUTGOING_SERVER }, /* 63, Cluster: Power Profile, Command: PowerProfileScheduleConstraintsResponse*/ \
	  { 0x0020, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 64, Cluster: Poll Control, Command: CheckIn*/ \
	  { 0x0020, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 65, Cluster: Poll Control, Command: CheckInResponse*/ \
	  { 0x0020, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 66, Cluster: Poll Control, Command: FastPollStop*/ \
	  { 0x0021, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 67, Cluster: Green Power, Command: GpPairing*/ \
	  { 0x0021, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 68, Cluster: Green Power, Command: GpProxyCommissioningMode*/ \
	  { 0x0021, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* 69, Cluster: Green Power, Command: GpResponse*/ \
	  { 0x0021, 0x0B, COMMAND_MASK_INCOMING_CLIENT }, /* 70, Cluster: Green Power, Command: GpProxyTableRequest*/ \
	  { 0x0300, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 71, Cluster: Color Control, Command: MoveToHue*/ \
	  { 0x0300, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* 72, Cluster: Color Control, Command: MoveHue*/ \
	  { 0x0300, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* 73, Cluster: Color Control, Command: StepHue*/ \
	  { 0x0300, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* 74, Cluster: Color Control, Command: MoveToSaturation*/ \
	  { 0x0300, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* 75, Cluster: Color Control, Command: MoveSaturation*/ \
	  { 0x0300, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* 76, Cluster: Color Control, Command: StepSaturation*/ \
	  { 0x0300, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* 77, Cluster: Color Control, Command: MoveToHueAndSaturation*/ \
	  { 0x0300, 0x07, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 78, Cluster: Color Control, Command: MoveToColor*/ \
	  { 0x0300, 0x08, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 79, Cluster: Color Control, Command: MoveColor*/ \
	  { 0x0300, 0x09, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 80, Cluster: Color Control, Command: StepColor*/ \
	  { 0x0300, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* 81, Cluster: Color Control, Command: MoveToColorTemperature*/ \
	  { 0x0300, 0x4B, COMMAND_MASK_INCOMING_SERVER }, /* 82, Cluster: Color Control, Command: MoveColorTemperature*/ \
	  { 0x0300, 0x4C, COMMAND_MASK_INCOMING_SERVER }, /* 83, Cluster: Color Control, Command: StepColorTemperature*/ \
	  { 0x0500, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 84, Cluster: IAS Zone, Command: ZoneEnrollResponse*/ \
	  { 0x0500, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 85, Cluster: IAS Zone, Command: ZoneStatusChangeNotification*/ \
	  { 0x0500, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 86, Cluster: IAS Zone, Command: ZoneEnrollRequest*/ \
	  { 0x0702, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 87, Cluster: Simple Metering, Command: GetProfileResponse*/ \
	  { 0x0702, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 88, Cluster: Simple Metering, Command: RequestMirror*/ \
	  { 0x0702, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 89, Cluster: Simple Metering, Command: RemoveMirror*/ \
	  { 0x0702, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* 90, Cluster: Simple Metering, Command: RequestFastPollModeResponse*/ \
	  { 0x0702, 0x0C, COMMAND_MASK_INCOMING_CLIENT }, /* 91, Cluster: Simple Metering, Command: SupplyStatusResponse*/ \
	  { 0x0B03, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 92, Cluster: Appliance Statistics, Command: LogNotification*/ \
	  { 0x0B03, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 93, Cluster: Appliance Statistics, Command: LogRequest*/ \
	  { 0x0B03, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 94, Cluster: Appliance Statistics, Command: LogQueueRequest*/ \
	  { 0x0B03, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 95, Cluster: Appliance Statistics, Command: LogResponse*/ \
	  { 0x0B03, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 96, Cluster: Appliance Statistics, Command: LogQueueResponse*/ \
	  { 0x0B03, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* 97, Cluster: Appliance Statistics, Command: StatisticsAvailable*/ \
	 } 
// Array of EmberAfManufacturerCodeEntry structures for commands.
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_COMMAND_MANUFACTURER_CODES { \
  { 0x00, 0x00 }  \
																																																																																																		 } 
// This is an array of EmberAfManufacturerCodeEntry structures for clusters.
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_CLUSTER_MANUFACTURER_CODES { \
  { 0x00, 0x00 }  \
																										 } 
// This is an array of EmberAfManufacturerCodeEntry structures for attributes.
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES { \
  { 0x00, 0x00 } \
																																																									 } 
// Array of EmberAfPluginReportingEntry structures.
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (6)
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS { \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: On/off, Attribute: on/off */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0008, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: Level Control, Attribute: current level */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x001A, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: Power Profile, Attribute: energy remote */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x001A, 0x0004, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: Power Profile, Attribute: schedule mode */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0300, 0x0003, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: Color Control, Attribute: current x */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0300, 0x0004, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: Color Control, Attribute: current y */ \
	 } 

#define EMBER_AF_MANUFACTURER_CODE 0x1049
#define EMBER_AF_DEFAULT_RESPONSE_POLICY_CONDITIONAL

// All Enabled Clusters
#define ZCL_USING_BASIC_CLUSTER_CLIENT
#define ZCL_USING_BASIC_CLUSTER_SERVER
#define ZCL_USING_IDENTIFY_CLUSTER_CLIENT
#define ZCL_USING_IDENTIFY_CLUSTER_SERVER
#define ZCL_USING_GROUPS_CLUSTER_CLIENT
#define ZCL_USING_SCENES_CLUSTER_CLIENT
#define ZCL_USING_ON_OFF_CLUSTER_CLIENT
#define ZCL_USING_ON_OFF_CLUSTER_SERVER
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
#define ZCL_USING_TIME_CLUSTER_SERVER
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_SERVER
#define ZCL_USING_POWER_PROFILE_CLUSTER_SERVER
#define ZCL_USING_POLL_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_GREEN_POWER_CLUSTER_CLIENT
#define ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
#define ZCL_USING_ILLUM_MEASUREMENT_CLUSTER_CLIENT
#define ZCL_USING_TEMP_MEASUREMENT_CLUSTER_CLIENT
#define ZCL_USING_RELATIVE_HUMIDITY_MEASUREMENT_CLUSTER_CLIENT
#define ZCL_USING_OCCUPANCY_SENSING_CLUSTER_CLIENT
#define ZCL_USING_IAS_ZONE_CLUSTER_CLIENT
#define ZCL_USING_SIMPLE_METERING_CLUSTER_CLIENT
#define ZCL_USING_METER_IDENTIFICATION_CLUSTER_CLIENT
#define ZCL_USING_APPLIANCE_STATISTICS_CLUSTER_CLIENT
#define ZCL_USING_ELECTRICAL_MEASUREMENT_CLUSTER_CLIENT

// Cluster Counts
#define EMBER_AF_BASIC_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_BASIC_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_IDENTIFY_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_IDENTIFY_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_GROUPS_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_SCENES_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_ON_OFF_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_ON_OFF_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_LEVEL_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_LEVEL_CONTROL_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_TIME_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_OTA_BOOTLOAD_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_POWER_PROFILE_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_POLL_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_GREEN_POWER_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_COLOR_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_COLOR_CONTROL_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_ILLUM_MEASUREMENT_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_TEMP_MEASUREMENT_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_RELATIVE_HUMIDITY_MEASUREMENT_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_OCCUPANCY_SENSING_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_IAS_ZONE_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_SIMPLE_METERING_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_METER_IDENTIFICATION_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_APPLIANCE_STATISTICS_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_ELECTRICAL_MEASUREMENT_CLUSTER_CLIENT_ENDPOINT_COUNT (1)

// All Enabled Cluster Attributes
#define ZCL_USING_BASIC_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_POWER_SOURCE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_IDENTIFY_TIME_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_GROUPS_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_ON_OFF_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CURRENT_LEVEL_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_TIME_CLUSTER_TIME_ATTRIBUTE
#define ZCL_USING_TIME_CLUSTER_TIME_STATUS_ATTRIBUTE
#define ZCL_USING_TIME_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_POWER_PROFILE_CLUSTER_TOTAL_PROFILE_NUM_ATTRIBUTE
#define ZCL_USING_POWER_PROFILE_CLUSTER_MULTIPLE_SCHEDULING_ATTRIBUTE
#define ZCL_USING_POWER_PROFILE_CLUSTER_ENERGY_FORMATTING_ATTRIBUTE
#define ZCL_USING_POWER_PROFILE_CLUSTER_ENERGY_REMOTE_ATTRIBUTE
#define ZCL_USING_POWER_PROFILE_CLUSTER_SCHEDULE_MODE_ATTRIBUTE
#define ZCL_USING_POWER_PROFILE_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_POLL_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_MAX_PROXY_TABLE_ENTRIES_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_PROXY_TABLE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GPP_ACTIVE_FUNCTIONALITY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_SHARED_SECURITY_KEY_TYPE_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_SHARED_SECURITY_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_GP_CLIENT_GP_LINK_KEY_ATTRIBUTE
#define ZCL_USING_GREEN_POWER_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_CURRENT_X_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_MODE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_OPTIONS_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_NUMBER_OF_PRIMARIES_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_ENHANCED_COLOR_MODE_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_CAPABILITIES_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MIN_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_TEMP_PHYSICAL_MAX_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_TEMPERATURE_LEVEL_MIN_MIREDS_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_START_UP_COLOR_TEMPERATURE_MIREDS_ATTRIBUTE
#define ZCL_USING_COLOR_CONTROL_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_ILLUM_MEASUREMENT_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_TEMP_MEASUREMENT_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_RELATIVE_HUMIDITY_MEASUREMENT_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_OCCUPANCY_SENSING_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_IAS_ZONE_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_SIMPLE_METERING_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_METER_IDENTIFICATION_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_APPLIANCE_STATISTICS_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ELECTRICAL_MEASUREMENT_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE

#define EMBER_AF_SUPPORT_COMMAND_DISCOVERY


#endif // SILABS_AF_ENDPOINT_CONFIG